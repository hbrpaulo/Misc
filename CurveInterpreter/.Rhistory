Saz2 --> SazF2(Sazonalidade<br>frag.)
%% Specfics aspects
RefInt --> Outsiders(Pontos fora<br>do intervalo)
Outsiders --> Count_out(Contagem<br>Porcentagem)
Outsiders --> Seq_out(Sequenciais)
%% Comparisons
TrendG --> Comp[Comparações<br>entre as partes]
TrendF --> Comp
SazG --> Comp
SazF --> Comp
%%Comparações<br>entre as partes
TrendG1 --> Dist1[Distância entre<br>curva e a referência]
TrendF1 --> Dist1
SazG1 --> Dist1
SazF1 --> Dist1
TrendG2 --> Dist2[Distância entre<br>curva e a referência]
TrendF2 --> Dist2
SazG2 --> Dist2
SazF2 --> Dist2
Seq_out --> Dist2
Count_out --> Dist2
Dist1 --> Comp1[Comparações<br>entre as partes]
Dist2 --> Comp2[Comparações<br>entre as partes]
%% Aesthetics
style RefDummy fill:#2BD72F
style NoRef fill:#2BD72F
style AnInd fill:#2BD72F
style Ref fill:#2BD72F
style RefPont fill:#2BD72F
style RefInt fill:#2BD72F
style SazG fill:#2BD72F
style SazG1 fill:#2BD72F
style SazG2 fill:#2BD72F
style SazF fill:#EEA35D
style SazF1 fill:#EEA35D
style SazF2 fill:#EEA35D
style TrendG fill:#2BD72F
style TrendG1 fill:#2BD72F
style TrendG2 fill:#2BD72F
style TrendF fill:#2BD72F
style TrendF1 fill:#2BD72F
style TrendF2 fill:#2BD72F
style Trend fill:#2BD72F
style Trend1 fill:#2BD72F
style Trend2 fill:#2BD72F
style Comp fill:#FFFFFF
style Comp1 fill:#FFFFFF
style Comp2 fill:#FFFFFF
style Dist1 fill:#FFFFFF
style Dist2 fill:#FFFFFF
')
diagram
install.packages("prettydoc")
rep(1, 16)
library(plotly)
labels = 1:12
values = rep(1, 12)
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label+percent',
insidetextorientation='radial')
fig
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label',
insidetextorientation='radial')
fig
labels = rev(1:12)
library(plotly)
labels = rev(1:12)
values = rep(1, 12)
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label',
insidetextorientation='radial')
fig
fig%>% add_pie(hole = 0.6)
#library(plotly)
labels = rev(1:12)
values = rep(1, 12)
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = rev(1:12)
values = rep(1, 12)
fig <- plot_ly(type='pie', labels=labels, values=values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(type='donut', labels=labels, values=values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(labels=labels, values=values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
labels = rev(1:24)
values = rep(1, 24)
fig <- plot_ly(labels=labels, values=values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(labels=labels, values=values,
colors = 'white',
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = rev(1:24)
values = rep(1, 24)
fig <- plot_ly(labels=labels, values=values,
colors = 'white',
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(labels=labels, values=values,
color = values,
colors = 'white',
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(labels=labels, values=values,
color = values,
colors = 'Blues',
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(labels=labels,
values=values,
colors = 'Blues',
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
library(RColorBrewer)
#library(plotly)
labels = rev(1:24)
values = rep(1, 24)
fig <- plot_ly(labels=labels,
values=values,
colors = 'Blues',
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
RColorBrewer::brewer.pal.info
fig <- plot_ly(labels=labels,
values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:2],
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(labels=labels,
values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:2],
color = values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = rev(1:24)
values = rep(1, 24)
fig <- plot_ly(labels=labels,
values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:2],
color = values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = rev(1:24)
values = rep(1, 24)
fig <- plot_ly(labels=labels,
values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:2],
color = ~values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = rev(1:24)
values = rep(1, 24)
fig <- plot_ly(labels=labels,
values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:24],
color = ~values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(labels=labels,
values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:24],
color = values,
textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(labels=labels,
values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:24],
textinfo='label',
insidetextorientation='radial')
fig <- plot_ly(labels=labels,
values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:24],
#               textinfo='label',
insidetextorientation='radial')
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(labels=labels,
values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:24],
textinfo='label'#,insidetextorientation='radial'
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = rev(1:24)
values = rep(1, 24)
fig <- plot_ly(values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:24],
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = rev(1:23)
values = rep(1, 24)
fig <- plot_ly(values=values,
colors = RColorBrewer::brewer.pal(3, "Set2")[1:24],
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = rev(1:23)
values = rep(1, 24)
fig <- plot_ly(values=values,
colors = RColorBrewer::brewer.pal(23, "Set2")[1:23],
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = c(0, rev(1:23))
values = rep(1, 24)
fig <- plot_ly(values=values,
colors = RColorBrewer::brewer.pal(23, "Set2")[1:23],
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = c(0, rev(1:23))
values = rep(1, 24)
fig <- plot_ly(values=values,
colors = RColorBrewer::brewer.pal(8, "Set2"),
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = c(0, rev(1:23))
values = rep(1, 24)
fig <- plot_ly(values=values,
#colors = RColorBrewer::brewer.pal(8, "Set2"),
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = c(0, rev(1:23))
values = rep(1, 24)
fig <- plot_ly(values=values,
colors = rep('white', 24)
textinfo='label',
#library(plotly)
labels = c(0, rev(1:23))
values = rep(1, 24)
fig <- plot_ly(values=values,
colors = rep('white', 24),
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = c(0, rev(1:23))
values = rep(1, 24)
fig <- plot_ly(values=values,
colors = rep('white', 24),
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = c(0, rev(1:23))
values = rep(1, 24)
fig <- plot_ly(values=values,
colors = rep('white', 24),
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(values=values,
color = rep('white', 24),
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
#library(plotly)
labels = c(0, rev(1:23))
values = rep(1, 24)
fig <- plot_ly(values=values,
fill = rep('white', 24),
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(values=values,
fill = 'white',
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(values=values,
textinfo='label',
insidetextorientation='radial',
labels=labels
)
fig %>% add_pie(hole = 0.6)
fig <- plot_ly(values=values,
textinfo='label',
insidetextorientation='radial',
marker = list(colors = labels),
labels=labels
)
fig %>% add_pie(hole = 0.6)
cores = 'white'
fig <- plot_ly(values=values,
textinfo='label',
insidetextorientation='radial',
marker = list(colors = cores),
labels=labels
)
fig %>% add_pie(hole = 0.6)
cores = rep('white', 24)
fig <- plot_ly(values=values,
textinfo='label',
insidetextorientation='radial',
marker = list(colors = cores),
labels=labels
)
fig %>% add_pie(hole = 0.6)
cores = rep(c('white', 'gray85'), 12)
fig <- plot_ly(values=values,
textinfo='label',
insidetextorientation='radial',
marker = list(colors = cores),
labels=labels
)
fig %>% add_pie(hole = 0.6)
fig %>% add_pie(hole = 0.4)
fig %>% add_pie(hole = 0.5)
cores
#library(plotly)
labels = c(0, rev(1:23))
values = rep(1, 24)
cores = rep(c('white', 'gray'), 12)
fig <- plot_ly(values=values,
textinfo='label',
insidetextorientation='radial',
marker = list(colors = cores),
labels=labels
)
fig %>% add_pie(hole = 0.5)
diagram <- mermaid('graph TD
Begin(CurveInterpreter) --> RefDummy(Há referência?)
RefDummy --> AnInd(Sem<br>referência)
AnInd --> NoRef(Análise<br>individual)
RefDummy --> Ref(Com<br>referência)
Ref -->RefPont(Com referência<br>pontual)
Ref --> RefInt(Com referência<br>intervalar)
NoRef --> Trend(Tendência)
RefPont --> Trend1(Tendência)
RefInt --> Trend2(Tendência)
Trend --> TrendG(Tendência<br>global.)
Trend --> TrendF(Tendência<br>frag.)
Trend1 --> TrendG1(Tendência<br>global.)
Trend1 --> TrendF1(Tendência<br>frag.)
Trend2 --> TrendG2(Tendência<br>global.)
Trend2 --> TrendF2(Tendência<br>frag.)
NoRef --> Saz(Sazonalidade)
RefPont --> Saz1(Sazonalidade)
RefInt --> Saz2(Sazonalidade)
Saz --> SazG(Sazonalidade<br>global)
Saz --> SazF(Sazonalidade<br>frag.)
Saz1 --> SazG1(Sazonalidade<br>global)
Saz1 --> SazF1(Sazonalidade<br>frag.)
Saz2 --> SazG2(Sazonalidade<br>global)
Saz2 --> SazF2(Sazonalidade<br>frag.)
%% Specfics aspects
RefInt --> Outsiders(Pontos fora<br>do intervalo)
Outsiders --> Count_out(Contagem<br>Porcentagem)
Outsiders --> Seq_out(Sequenciais)
%% Comparisons
TrendG --> Comp[Comparações<br>entre as partes]
TrendF --> Comp
SazG --> Comp
SazF --> Comp
%%Comparações<br>entre as partes
TrendG1 --> Dist1[Distância entre<br>curva e a referência]
TrendF1 --> Dist1
SazG1 --> Dist1
SazF1 --> Dist1
TrendG2 --> Dist2[Distância entre<br>curva e a referência]
TrendF2 --> Dist2
SazG2 --> Dist2
SazF2 --> Dist2
Seq_out --> Dist2
Count_out --> Dist2
Dist1 --> Comp1[Comparações<br>entre as partes]
Dist2 --> Comp2[Comparações<br>entre as partes]
%% Aesthetics
style RefDummy fill:#2BD72F
style NoRef fill:#2BD72F
style AnInd fill:#2BD72F
style Ref fill:#2BD72F
style RefPont fill:#2BD72F
style RefInt fill:#2BD72F
style SazG fill:#2BD72F
style SazG1 fill:#2BD72F
style SazG2 fill:#2BD72F
style SazF fill:#EEA35D
style SazF1 fill:#EEA35D
style SazF2 fill:#EEA35D
style TrendG fill:#2BD72F
style TrendG1 fill:#2BD72F
style TrendG2 fill:#2BD72F
style TrendF fill:#2BD72F
style TrendF1 fill:#2BD72F
style TrendF2 fill:#2BD72F
style Trend fill:#2BD72F
style Trend1 fill:#2BD72F
style Trend2 fill:#2BD72F
style Comp fill:#FFFFFF
style Comp1 fill:#FFFFFF
style Comp2 fill:#FFFFFF
style Dist1 fill:#FFFFFF
style Dist2 fill:#FFFFFF
')
diagram
if (!exists("database")) {
# Parameters for the series
n <- 20  # Number of observations per cycle
m <- 30  # Number of cycles
# Initialize the database
database <- tibble(data_series = numeric(n * m))
# Generate the seasonal data series
database$data_series <-
sapply(
1:m,
FUN = function(x) {
seasonality <- (1:n) / 2  # Create a seasonal pattern
runif(n, 0, n / 5) + seasonality  # Add random noise to the seasonal pattern
}
) %>% as.vector()
}
# Function to calculate the trend direction and p-value
trend_direction_pvalue <- function(x) {
aux <- aTSA::trend.test(x)  # Perform trend test
return(list(
pvalue = aux$p.value,  # Extract p-value
direction = ifelse(aux$alternative == 'data have a decreasing trend',
'decreasing',
'increasing')  # Determine trend direction
))
}
# Trend metrics calculations
results$metrics$trend$global <- trend_direction_pvalue(database$data_series)  # Overall trend for the entire series
results$metrics$trend$global
# Function to calculate the trend direction and p-value
trend_direction_pvalue <- function(x) {
aux <- aTSA::trend.test(x)  # Perform trend test
return(list(
pvalue = aux$p.value,  # Extract p-value
direction = ifelse(aux$alternative == 'data have a decreasing trend',
'decrescente',
'crescente')  # Determine trend direction
))
}
# Trend metrics calculations
results$metrics$trend$global <- trend_direction_pvalue(database$data_series)  # Overall trend for the entire series
results$metrics$trend$begin <- trend_direction_pvalue(database[database$part == 'beginning', ]$data_series)  # Trend for the beginning part
results$metrics$trend$middle <- trend_direction_pvalue(database[database$part == 'middle', ]$data_series)  # Trend for the middle part
results$metrics$trend$end <- trend_direction_pvalue(database[database$part == 'end', ]$data_series)  # Trend for the end part
# Plot the trend decomposition using STL (Seasonal-Trend decomposition using Loess)
plot(
stl(ts(database$data_series, frequency = 10), s.window = 'periodic')[["time.series"]][, 2],
main = str_wrap('Trend Decomposition', width = 35),  # Title for the plot
xlab = 'Observations',  # X-axis label
ylab = 'Trend'  # Y-axis label
)
results$metrics$trend$global$direcao
results$metrics$trend$global
results$metrics$trend$end$direction
