}
# Function to find the variance between cycles for a given frequency
variance_between_cycles <- function(x, freq) {
x <- as.vector(x)
aux <-
try(matrix(x, ncol = freq, byrow = TRUE), silent = TRUE)  # Reshape data into cycles
vars <-
apply(aux, 2, var)  # Calculate variance for each cycle's iteration
return(mean(vars))  # Return the average variance across cycles
}
seasonality_finder <- function(data = database,
n_min = 7, n_centers = 2){
# n_min: Minimum number of elements in each cycle to consider
# Create a data frame to store frequencies and their corresponding variances
aux <- tibble(
freq = n_min:(length(data$data_series) / 3),
# Frequency range
vars = sapply(
n_min:(length(data$data_series) / 3),
FUN = function(f) {
# Calculate variance for each frequency
variance_between_cycles(data$data_series, freq = f)
}
)
)
# Apply k-means clustering to group frequencies based on variance
divide_groups <- kmeans(aux$vars, centers = n_centers)
aux$group <- divide_groups$cluster
return(aux)
}
season_possibilities_all <- seasonality_finder()
# Identify the group with the lowest variance
season_possibilities <- season_possibilities_all %>%
arrange(vars) %>%
slice(1:5) %>%  # Select the five lowest variances
select(-group) %>%
mutate(test = "KW-R",# Specify the test used
pvalue = NA)
j <- 1
for (i in season_possibilities$freq) {
season_possibilities$pvalue[j] <-
seastests::combined_test(ts(database$data_series,
frequency = i), freq = i)$Pval["KW-R p-value"]
j <- j + 1
}
# Find combinations of frequencies that are multiples of one another
season_combinations <- t(combn(season_possibilities$freq, 2))
colnames(season_combinations)[1:2] <- c("freq1", "freq2")
season_combinations <- data.frame(
season_combinations,
has_equivalence = apply(
FUN = function(x) {
ratio <- x[1] / x[2]
return(ceiling(ratio) == floor(ratio))  # Check if freq1 is a multiple of freq2
},
MARGIN = 1,
X = season_combinations
)
) %>%
filter(has_equivalence == TRUE) %>%
janitor::clean_names()  # Clean column names
# Add equivalence results to the season_possibilities data frame
season_possibilities$has_equivalence <-
season_possibilities$freq %in% c(season_combinations$freq1, season_combinations$freq2)
season_possibilities <- season_possibilities %>% arrange(freq)
season_possibilities <- season_possibilities %>%
# add_row(freq = 7, vars = 2, test = 'w', pvalue = .05, has_equivalence = FALSE) %>%
# add_row(freq = 13, vars = 2, test = 'w', pvalue = .1, has_equivalence = FALSE) %>%
# add_row(freq = 7, vars = 2, test = 'w', pvalue = .05, has_equivalence = FALSE) %>%
# add_row(freq = 13, vars = 2, test = 'w', pvalue = .1, has_equivalence = FALSE) %>%
# add_row(freq = 17, vars = 2, test = 'w', pvalue = 1, has_equivalence = FALSE) %>%
mutate(significance = case_when(pvalue <= alpha/2  ~ "Alta significC"ncia",
season_possibilities <- season_possibilities %>%
# add_row(freq = 7, vars = 2, test = 'w', pvalue = .05, has_equivalence = FALSE) %>%
# add_row(freq = 13, vars = 2, test = 'w', pvalue = .1, has_equivalence = FALSE) %>%
# add_row(freq = 17, vars = 2, test = 'w', pvalue = 1, has_equivalence = FALSE) %>%
mutate(significance = case_when(pvalue <= alpha/2  ~ "Alta significância",
pvalue <= alpha ~ "Significância",
pvalue <= alpha*2 ~ "Alguma significância",
.default = 'Não significância'))
source('scripts/fragments_comparison.R')
kableExtra::kbl(
partdiff_df,
caption = "Diferença entre os fragmentos",
booktabs = T,
col.names = c("Fragmento 1", "Fragmento 2", "Diferença", "Teste'"),
align = "c",
escape = F
) %>%
kableExtra::kable_styling(latex_options = "hold_position", full_width = FALSE)
partdiff_plot
text(expression(lambda), 1, 1)
plot(1)
text(expression(lambda), 1, 1)
plot(1, 1)
text(expression(lambda), 1, 1)
expression(lambda)
text(expression(lambda), y = 1, x = 1)
text(expression(lambda[GC]), y = 1, x = 1)
plot(1, 1)
text(expression(lambda[GC]), y = 1, x = 1)
t.test(rnorm(100), rnorm(100))
t.test(rnorm(100), rnorm(100))$p.value
t.test(rnorm(100), rnorm(100))$p.value
replicate(100, t.test(rnorm(100), rnorm(100))$p.value)
hist(replicate(100, t.test(rnorm(100), rnorm(100))$p.value))
hist(replicate(100, t.test(rnorm(100), rnorm(100))$p.value))
hist(replicate(100, t.test(rnorm(100), rnorm(100))$p.value))
hist(replicate(100, t.test(rnorm(100), rnorm(100))$p.value))
hist(replicate(1000, t.test(rnorm(100), rnorm(100))$p.value))
hist(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))
hist(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))
hist(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))
plot(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))
order(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))
plot(order(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value)))
plot(order(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value)),
seq(0, 1, length.out = 1000))
plot(x = sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value)),
y = seq(0, 1, length.out = 1000))
plot(x = sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value)))
plot(x = sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value)))
plot(x = sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value)),
type = 'l')
abline(a = 0, b = 1)
abline(a = 1, b = 1)
abline(a = 1, b = 0)
abline(a = .1, b = 0)
abline(a = 0, b = .1)
abline(a = 0, b = .01)
plot(x = sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value)),
type = 'l')
abline(a = 0, b = .01)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = .01)
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(100, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 100)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 1, 1), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 1, 1), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, -1, 1), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 2), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 2), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 2), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 2), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 0, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 1, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
abline(a = 0, b = 1)
plot(x = -log10(sort(replicate(1000, t.test(rnorm(1000, 8, 5), rnorm(1000))$p.value))),
-log10(seq(0, 1, length.out = 1000)))
graph <- 'none'
source('scripts/IntervalMainPlot.R')
source('scripts/tests/trends_test.R')
source('scripts/interpretations/trends_interpretations.R')
# Plot the variance against frequencies, color-coded by group
plot(
season_possibilities_all$freq,
xlab = 'Frequency',
season_possibilities_all$vars,
ylab = "Within Variance",
type = "l",
main = str_wrap("Variance Between Cycles for Each Frequency", width = 35)
)
points(
x = season_possibilities_all$freq,
y = season_possibilities_all$vars,
col = season_possibilities_all$group,
pch = 19
)
# Plot the p-values of the seasonality test for each frequency
plot(
x = 7:(length(database$data_series) / 3),
y = sapply(7:(length(
database$data_series
) / 3),
function(f) {
seastests::kw(ts(database$data_series,
frequency = f), freq = f)$Pval
}),
type = "o",
pch = 19,
ylab = "P-value",
xlab = 'Frequency',
main = str_wrap("P-value of the Seasonality test KW for Each Frequency", width = 35)
)
source('scripts/interpretations/seasonalities_interpretations.R')
source('scripts/fragments_comparison.R')
source('scripts/tests/fragments_comparison_test.R')
partdiff_tb
partdiff_plot
partdiff_plot <- database %>%
ggplot(aes(x = part, y = data_series)) +
geom_violin(col = "gray95", fill = "gray99") +
geom_jitter() +
geom_boxplot(aes(fill = part), varwidth = TRUE) +
labs(title = 'Violin plot of the data series by part',
x = 'Part',
y = 'Data series') +
scale_fill_brewer(palette = "Blues") +
theme(legend.position = 'none')
partdiff_plot
partdiff_plot <- database %>%
ggplot(aes(x = part, y = data_series)) +
geom_violin(col = "gray95", fill = "gray99") +
geom_point() +
geom_boxplot(aes(fill = part), varwidth = TRUE) +
labs(title = 'Violin plot of the data series by part',
x = 'Part',
y = 'Data series') +
scale_fill_brewer(palette = "Blues") +
theme(legend.position = 'none')
partdiff_plot
partdiff_plot <- database %>%
ggplot(aes(x = part, y = data_series)) +
geom_violin(col = "gray95", fill = "gray99") +
geom_boxplot(aes(fill = part), varwidth = TRUE) +
labs(title = 'Violin plot of the data series by part',
x = 'Part',
y = 'Data series') +
scale_fill_brewer(palette = "Blues") +
theme(legend.position = 'none')
partdiff_plot
cor <- -.321
cor2 <- '-.321'
par(mfrow = c(1, 2))
plot(1:10, 1:10, main = bquote("Hello" ~ r[xy] == .(cor) ~ "and" ~ B^2))
plot(1:10, 1:10, main = bquote("Hello" ~ r[xy] == .(cor2) ~ "and" ~ B^2))
dev.off()
cor <- -.321
cor2 <- '-.321'
plot(1:10, 1:10, main = bquote("lambda" ~ r[xy] == .(cor2) ~ "and" ~ B^2))
plot(1:10, 1:10, main = bquote("\lambda" ~ r[xy] == .(cor2) ~ "and" ~ B^2))
plot(1:10, 1:10, main = bquote(expression("lambda") ~ r[xy] == .(cor2) ~ "and" ~ B^2))
plot(1:10, 1:10, main = bquote(expression(lambda) ~ r[xy] == .(cor2) ~ "and" ~ B^2))
plot(1:10, 1:10, main = bquote(lambda ~ r[xy] == .(cor2) ~ "and" ~ B^2))
plot(1:10, 1:10, main = bquote(lambda ~  == .(cor2) ~ "and" ~ B^2))
plot(1:10, 1:10, main = bquote(lambda ~ r[xy] = .(cor2) ~ "and" ~ B^2))
plot(1:10, 1:10, main = bquote(lambda ~ r[xy] = .(cor2) ~ "and" ~ B^2))
plot(1:10, 1:10, main = bquote(lambda ~ r[xy] == .(cor2)))
plot(1:10, 1:10, main = bquote(lambda == .(cor2)))
text(6, 6, bquote(lambda == .(cor2)))
plot(1:10, 1:10, main = bquote(lambda == .(cor2)), pch = NULL)
text(6, 6, bquote(lambda == .(cor2)))
plot(1:10, 1:10, main = bquote(lambda == .(cor2)), pch = ' ')
text(6, 6, bquote(lambda == .(cor2)))
plot(1:10)
