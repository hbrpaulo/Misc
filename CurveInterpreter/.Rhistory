geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
ggtitle(seed))
}
return(list(dff = output, beginning = beginning, ending = ending))
}
microbenchmark::microbenchmark(
func_antigo(seed = 100, divisor = .1, n = 99),
func_novo(seed = 100, divisor = .1, n = 99),
times = 10
)
func_novo(seed = 100, divisor = .1, n = 99)
# criacao de um conjunto semelhante aos residuos ----
#seed = NULL; divisor = .2; n = 100; plot = FALSE
func <- function(seed = NULL, divisor = .2, n = 100, plot = FALSE){
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var))
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
beginning = unname(quantile(output$x, divisor))
ending = unname(quantile(output$x, 1-divisor))
output <- output %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
if(plot==TRUE){
print(ggplot(data = output, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
ggtitle(seed))
}
return(list(dff = output, beginning = beginning, ending = ending))
}
resi_cs <- func(seed = 100, divisor = .1, n = 99)
resi_cs
# criacao de um conjunto semelhante aos residuos ----
#seed = NULL; divisor = .2; n = 100; plot = FALSE
func <- function(seed = NULL, divisor = .2, n = 100, plot = FALSE){
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var))
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
beginning = unname(quantile(output$x, divisor))
ending = unname(quantile(output$x, 1-divisor))
output <- output %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
if(plot==TRUE){
print(ggplot(data = output, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
ggtitle(seed))
}
attr(output, 'beginning') <- beginning
return(list(dff = output, beginning = beginning, ending = ending))
}
func(seed = 100, divisor = .1, n = 99)
resi_cs <- func(seed = 100, divisor = .1, n = 99)
View(resi_cs)
View(resi_cs)
resi_cs[["dff"]]
attr(resi_cs$dff)
attr(resi_cs$dff, 'beginning')
attrs(resi_cs$dff)
# criacao de um conjunto semelhante aos residuos ----
#seed = NULL; divisor = .2; n = 100; plot = FALSE
func <- function(seed = NULL, divisor = .2, n = 100, plot = FALSE){
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var))
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
beginning = unname(quantile(output$x, divisor))
ending = unname(quantile(output$x, 1-divisor))
output <- output %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
if(plot==TRUE){
print(ggplot(data = output, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
ggtitle(seed))
}
attr(output, 'beginning') <- beginning
attr(output, 'ending') <- ending
return(list(dff = output, beginning = beginning, ending = ending))
}
resi_cs <- func(seed = 100, divisor = .1, n = 99)
func(seed = 100, divisor = .1, n = 99)$output
func(seed = 100, divisor = .1, n = 99)$dff
func(seed = 100, divisor = .1, n = 99)$dff %>% print.AsIs()
attributes(resi_cs$dff)
# criacao de um conjunto semelhante aos residuos ----
#seed = NULL; divisor = .2; n = 100; plot = FALSE
func <- function(seed = NULL, divisor = .2, n = 100, plot = FALSE){
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var))
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
beginning = unname(quantile(output$x, divisor))
ending = unname(quantile(output$x, 1-divisor))
output <- output %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
if(plot==TRUE){
print(ggplot(data = output, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
ggtitle(seed))
}
attr(output, 'beginning') <- beginning
attr(output, 'ending') <- ending
return(output)
}
resi_cs <- func(seed = 100, divisor = .1, n = 99)
resi_cs <- func(seed = 100, divisor = .1, n = 99)
func(seed = 100, divisor = .1, n = 99)$dff %>% print.AsIs()
func(seed = 100, divisor = .1, n = 99)
# criacao de um conjunto semelhante aos residuos ----
#seed = NULL; divisor = .2; n = 100; plot = FALSE
func <- function(seed = NULL, divisor = .2, n = 100, plot = FALSE){
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var)) %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
attr(output, 'beginning') <- unname(quantile(output$x, divisor))
attr(output, 'ending') <- unname(quantile(output$x, 1-divisor))
if(plot==TRUE){
print(ggplot(data = output, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
ggtitle(seed))
}
return(output)
}
#resi_cs <- lapply(as.list(100), func, divisor = .2)[[1]]
resi_cs <- func(seed = 100, divisor = .1, n = 99)
attributes(resi_cs)
rm(list = ls())
library(tidyverse)
library(tibble)
theme_set(theme_classic())
# criacao de um conjunto semelhante aos residuos ----
#seed = NULL; divisor = .2; n = 100; plot = FALSE
func <- function(seed = NULL, divisor = .2, n = 100, plot = FALSE){
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var)) %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
attr(output, 'beginning') <- unname(quantile(output$x, divisor))
attr(output, 'ending') <- unname(quantile(output$x, 1-divisor))
if(plot==TRUE){
print(ggplot(data = output, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
ggtitle(seed))
}
return(output)
}
#resi_cs <- lapply(as.list(100), func, divisor = .2)[[1]]
resi_cs <- func(seed = 100, divisor = .1, n = 99)
attributes(resi_cs)
# separacao de inicio|meio|fim usando quantis ----
resi_cs_middle <- resi_cs %>%
filter(between(x, beginning, ending))
attr(resi_cs, 'beginning')
# separacao de inicio|meio|fim usando quantis ----
resi_cs_middle <- resi_cs %>%
filter(between(x, attr(resi_cs, 'beginning'),
attr(resi_cs, 'ending')))
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2)
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed')
plot(resi_cs$diffs1, type = 'l')
plot(resi_cs$diffsa, type = 'l')
plot(resi_cs$diffs1, type = 'l')
# tendencia total
aTSA::trend.test(resi_cs_middle$diffs2)
aTSA::trend.test(resi_cs_middle$diffs1)
plot(resi_cs_middle$diffs1)
plot(resi_cs_middle$diffs2)
beginning <- unname(quantile(output$x, divisor))
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var)) %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
seed = NULL; divisor = .2; n = 100; plot = FALSE
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var)) %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
beginning <- unname(quantile(output$x, divisor))
ending <- unname(quantile(output$x, 1-divisor))
attr(output, 'beginning') <- beginning
attr(output, 'ending') <- ending
ifelse(output$x<beginning, 'beginning',
ifelse(output$x>ending, 'ending', 'middle')
attr(output, 'beginning') <- beginning
ifelse(output$x<beginning, 'beginning',
ifelse(output$x>ending, 'ending', 'middle'))
ifelse(output$x<beginning, 'beginning',
ifelse(output$x>ending, 'ending', 'middle'))
output$part <- ifelse(output$x<beginning, 'beginning',
ifelse(output$x>ending, 'ending', 'middle'))
rm(list = ls())
library(tidyverse)
library(tibble)
theme_set(theme_classic())
# criacao de um conjunto semelhante aos residuos ----
#seed = NULL; divisor = .2; n = 100; plot = FALSE
func <- function(seed = NULL, divisor = .2, n = 100, plot = FALSE){
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var)) %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
beginning <- unname(quantile(output$x, divisor))
ending <- unname(quantile(output$x, 1-divisor))
output$part <- ifelse(output$x<beginning, 'beginning',
ifelse(output$x>ending, 'ending', 'middle'))
attr(output, 'beginning') <- beginning
attr(output, 'ending') <- ending
if(plot==TRUE){
print(ggplot(data = output, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
ggtitle(seed))
}
return(output)
}
#resi_cs <- lapply(as.list(100), func, divisor = .2)[[1]]
resi_cs <- func(seed = 100, divisor = .1, n = 99)
resi_cs
seed = NULL; divisor = .2; n = 100; plot = FALSE
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var)) %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
beginning <- unname(quantile(output$x, divisor))
ending <- unname(quantile(output$x, 1-divisor))
ifelse(output$x<beginning, 'beginning',
ifelse(output$x>ending, 'ending', 'middle'))
output$part <- ifelse(output$x<beginning, 'beginning',
ifelse(output$x>ending, 'ending', 'middle'))
attr(output, 'beginning') <- beginning
attr(output, 'ending') <- ending
rm(list = ls())
library(tidyverse)
library(tibble)
theme_set(theme_classic())
# criacao de um conjunto semelhante aos residuos ----
#seed = NULL; divisor = .2; n = 100; plot = FALSE
func <- function(seed = NULL, divisor = .2, n = 100, plot = FALSE){
var <- .1
set.seed(seed)
output <- tibble(x = 1:n,
ref = sort(rnorm(n, 1, .1), decreasing = TRUE),
res = sort(rnorm(n, 1, .2), decreasing = TRUE),
ref_sup = ref * (1+var),
ref_inf = ref * (1-var)) %>% rowwise %>%
mutate(out_sup = res>ref_sup,
out_inf = res>ref_inf) %>% ungroup
output$diffs1 = output$ref - output$res
output$diffsa = abs(output$diffs1)
output$diffs2 = (output$diffs1)^2
beginning <- unname(quantile(output$x, divisor))
ending <- unname(quantile(output$x, 1-divisor))
output$part <- ifelse(output$x<beginning, 'beginning',
ifelse(output$x>ending, 'ending', 'middle'))
attr(output, 'beginning') <- beginning
attr(output, 'ending') <- ending
if(plot==TRUE){
print(ggplot(data = output, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
ggtitle(seed))
}
return(output)
}
#resi_cs <- lapply(as.list(100), func, divisor = .2)[[1]]
resi_cs <- func(seed = 100, divisor = .1, n = 99)
#resi_cs <- lapply(as.list(100), func, divisor = .2)[[1]]
resi_cs <- func(seed = 100, divisor = .1, n = 200)
# separacao de inicio|meio|fim usando quantis ----
resi_cs_middle <- resi_cs %>%
filter(between(x, attr(resi_cs, 'beginning'),
attr(resi_cs, 'ending')))
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed')
resi_cs
ggplot(data = resi_cs, aes(x = x, y = res, col = part)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed')
=
ggplot(data = resi_cs, aes(x = x, y = res, col = part)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'black') +
geom_line(aes(x = x, y = ref_inf), col = 'black', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'black', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part)
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'free_y')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'free')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'free_x')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'free')
ggplot(data = resi_cs, aes(x = x, y = res, group = part)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'free')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
# geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
# geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'free')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
# geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
# geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'free_x')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
# geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
# geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'free')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
# geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
# geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part)
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
# geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
# geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'fixed')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
# geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
# geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'fixed')
ggplot(data = resi_cs, aes(x = x, y = res)) +
geom_line() +
geom_line(aes(x = x, y = ref), col = 'red') +
geom_line(aes(x = x, y = ref_inf), col = 'red', lty = 2) +
geom_line(aes(x = x, y = ref_sup), col = 'red', lty = 2) +
# geom_vline(xintercept = attr(resi_cs, 'beginning'), linetype = 'dashed') +
# geom_vline(xintercept = attr(resi_cs, 'ending'), linetype = 'dashed') +
facet_wrap(~part, scales = 'free_x')
